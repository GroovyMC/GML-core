import groovy.transform.CompileStatic
import org.w3c.dom.Document
import org.w3c.dom.Element

modrinth {
    token = findProperty('modrinthToken') ?: System.getenv('MODRINTH_TOKEN')
    projectId = project.modrinth_project
    versionNumber = project.version
    versionType = project.ext.versionBasedReleaseType
    uploadFile = tasks.fullJar
    gameVersions = [mc_version]
    loaders = ['forge']
    changelog.set(tasks.changelog.output.map {
        it.asFile.text
    })
}
tasks.named('modrinth') {
    dependsOn(tasks.fullJar, tasks.changelog)
}

publishCurseForge {
    apiToken = findProperty('curseforgeKey') ?: System.getenv('CURSEFORGE_TOKEN')
    group = 'publishing'
    disableVersionDetection()

    final projectId = findProperty('curseforge_project')
    final modFile = upload(projectId, tasks.fullJar)
    modFile.changelog = tasks.changelog.output.asFile.get()
    modFile.releaseType = project.ext.versionBasedReleaseType
    modFile.displayName = "$archivesBaseName-$version" as String
    modFile.addJavaVersion 'Java 17'
    modFile.addModLoader 'Forge'
    modFile.addGameVersion "$mc_version"

    dependsOn(tasks.fullJar)
    finalizedBy(':makeReadme')
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            it.artifacts = [
                    jar, sourcesJar, fullJar, groovydocJar
            ]
            it.artifactId = 'gml'
            changelog.addArtifact(it)

            pom {
                withXml { XmlProvider xml ->
                    final element = xml.asElement()
                    var depsElem = element.getOwnerDocument().createElement('dependencies')
                    var owner = element.getOwnerDocument()
                    var deps = (DependencySet) project.configurations.groovy.getDependencies()
                    deps.each {
                        depsElem.appendChild createDependency(owner, it.group, it.name, it.version, 'compile')
                    }
                    depsElem.appendChild createDependency(owner, project.group, 'transform', project.version, 'compile')
                    element.appendChild(depsElem)
                }
            }
        }
        register('transform', MavenPublication) {
            it.artifactId = 'transform'
            it.artifacts = [transformJar, transformSources]
            pom {
                withXml { XmlProvider xml ->
                    final element = xml.asElement()
                    var depsElem = element.getOwnerDocument().createElement('dependencies')
                    var owner = element.getOwnerDocument()
                    var deps = (DependencySet) project.configurations.groovy.getDependencies()
                    deps.each {
                        depsElem.appendChild createDependency(owner, it.group, it.name, it.version, 'compile')
                    }
                    element.appendChild(depsElem)
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = (System.getenv('MAVEN_USER') ?: findProperty('inquisitionMavenUser')) ?: ''
                password = (System.getenv('MAVEN_PASSWORD') ?: findProperty('inquisitionMavenPassword')) ?: ''
            }
        }
    }
}

@CompileStatic
static Element createDependency(Document owner, String group, String name, String version, String scope) {
    var sub = owner.createElement('dependency')

    var groupEl = owner.createElement('groupId')
    groupEl.appendChild(owner.createTextNode(group))
    sub.appendChild groupEl

    var artEl = owner.createElement('artifactId')
    artEl.appendChild(owner.createTextNode(name))
    sub.appendChild artEl

    var verEl = owner.createElement('version')
    verEl.appendChild(owner.createTextNode(version))
    sub.appendChild verEl

    var scopeEl = owner.createElement('scope')
    scopeEl.appendChild(owner.createTextNode(scope))
    sub.appendChild scopeEl

    return sub
}