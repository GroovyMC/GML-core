import groovy.transform.CompileStatic
import net.darkhax.curseforgegradle.TaskPublishCurseForge
import org.w3c.dom.Document
import org.w3c.dom.Element

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "net.darkhax.curseforgegradle:CurseForgeGradle:${cursegradle_version}"
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    it.apiToken = findProperty('curseforgeKey')
    it.group = 'publishing'
    it.disableVersionDetection()

    var projectId = findProperty('curseforge_project')
    var modFile = it.upload(projectId, tasks.getByName('fullJar'))
    modFile.changelog = rootProject.file('changelog.txt')
    modFile.releaseType = findProperty('release_type')
    modFile.displayName = "$archivesBaseName-$version" as String
    modFile.addJavaVersion 'Java 17'
    modFile.addModLoader 'Forge'
    modFile.addGameVersion "$mc_version"

    it.dependsOn(fullJar)
    it.finalizedBy(':makeReadme')
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            it.artifacts = [
                    jar, sourcesJar, fullJar, groovydocJar
            ]
            it.artifactId = 'gml'

            pom {
                withXml { XmlProvider xml ->
                    final element = xml.asElement()
                    var depsElem = element.getOwnerDocument().createElement('dependencies')
                    var owner = element.getOwnerDocument()
                    var deps = (DependencySet) project.configurations.groovy.getDependencies()
                    deps.each {
                        depsElem.appendChild createDependency(owner, it.group, it.name, it.version, 'compile')
                    }
                    depsElem.appendChild createDependency(owner, project.group, 'transform', project.version, 'compile')
                    element.appendChild(depsElem)
                }
            }
        }
        register('transform', MavenPublication) {
            it.artifactId = 'transform'
            it.artifacts = [transformJar, transformSources]
            pom {
                withXml { XmlProvider xml ->
                    final element = xml.asElement()
                    var depsElem = element.getOwnerDocument().createElement('dependencies')
                    var owner = element.getOwnerDocument()
                    var deps = (DependencySet) project.configurations.groovy.getDependencies()
                    deps.each {
                        depsElem.appendChild createDependency(owner, it.group, it.name, it.version, 'compile')
                    }
                    element.appendChild(depsElem)
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = findProperty('inquisitionMavenUser') ?: ''
                password = findProperty('inquisitionMavenPassword') ?: ''
            }
        }
    }
}

@CompileStatic
static Element createDependency(Document owner, String group, String name, String version, String scope) {
    var sub = owner.createElement('dependency')

    var groupEl = owner.createElement('groupId')
    groupEl.appendChild(owner.createTextNode(group))
    sub.appendChild groupEl

    var artEl = owner.createElement('artifactId')
    artEl.appendChild(owner.createTextNode(name))
    sub.appendChild artEl

    var verEl = owner.createElement('version')
    verEl.appendChild(owner.createTextNode(version))
    sub.appendChild verEl

    var scopeEl = owner.createElement('scope')
    scopeEl.appendChild(owner.createTextNode(scope))
    sub.appendChild scopeEl

    return sub
}